<!-- livebook:{"persist_outputs":true} -->

# Advent of Code Template

```elixir
Mix.install(
  [
    {:benchee, "~> 1.2"},
    # {:exla, "~> 0.6.0"},
    # {:explorer, "~> 0.7"},
    {:kino, "~> 0.11.0"},
    {:kino_aoc, "~> 0.1.5"}
    # {:kino_vega_lite, "~> 0.1.11"},
    # {:nimble_parsec, "~> 1.4"},
    # {:nx, "~> 0.6.0"}
  ]
  # config: [
  #   nx: [
  #     default_backend: EXLA.Backend,
  #     default_defn_options: [compiler: EXLA]
  #   ],
  #   exla: [
  #     default_client: :cuda,
  #     clients: [
  #       host: [platform: :host],
  #       cuda: [platform: :cuda]
  #     ]
  #   ]
  # ],
  # system_env: [
  #   XLA_TARGET: "cuda120"
  # ]
)

# Nx.global_default_backend(EXLA.Backend)
```

## Problem

<!-- livebook:{"attrs":{"assign_to":"input","day":"3","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, input} = KinoAOC.download_puzzle("2023", "3", System.fetch_env!("LB_AOC_SESSION"))
```

<!-- livebook:{"output":true} -->

```
{:ok,
 ".....664...998........343...............851............................2............414.....................3....................948.164....\n......*..................*617....885...*....................-......250.........536..........470...#..................../4......=.....*......\n...407...570..218................-.....654........776.....920.........*753...........566......*..347.....61.-979..786........935...42.......\n.......%....*...$..311.102..........................*.907.....723...............622-....*..354..............................................\n.....266..............*....987.554...........&....288...#......#.......................69......41..........486..-...........................\n.849................................&........781...........978......724*..196..../767................725..../...892.....*355.....815.390....\n....*......@.....*988......%........704...............*......&...........*...................826.....................243.......#....*.......\n...796......729.9.........490..721....................438.=....272..54&...926..481..............*..523......&.785...........766.......*493..\n........281.........706...........=.666.......505.........579.*................./...669.........73...*...639...*.......479.........514......\n...........*...386.......375..................................525.926..$120............&.580.........457........325.......*829..............\n.....758..662.......937....%...661.24......749*323...444.............*.............583....*.........................................223.....\n.......*........665....*...........*................@.................154......965..*....119.......620*............347.................*470.\n........391.........183.........75..783../....................209.312............*...362........./.....667..........*....77.................\n...379=..........................$......261..228........907......*.......+591...178.........227.704........@771..667..........268......543..\n.......................#.....................*..........*....................................-........*581...........101........*.....*.....\n................471...545..135........432..178....$225..143...973#..322............2.................................*...........239...985..\n......728*612...*.........*.....65....................................*...........*................&..............527....255+../............\n..255.........435.304....854...................-............=........261......&...749....+......196....694......................779..271.374\n......604.........*.....................708.....922.......76..82*554......991..19........456............*..582.........597@.................\n.................374..*........*707........................................*....................609...52....%.................483...........\n..../..................739......................$..........649...973.*511.861..20%.................=.....................148....*......343..\n...978.................................282&...401......961....-.*.........................................499%.........../.....347..........\n.................+..174..315.-819.................841.....*66......820.836......8....60....456........*........434..........................\n....62%.......908......./.................770....../..................*.....852......&.....*........317...%......@.......+.......691........\n........793......../......411......963.......*594..................@........@......*.......45.............729...........306.148....*..@.....\n626.......$......35..........*........*...........................77.134........584.....23....35................589........./...482..853....\n.......................366..668.........................238...........*..265.........*..........*...........&......*...471..................\n..741.............679.................@.807...76....185*...........211..%.........507....178..583....*.561...521..620...*....865.$247.494...\n.....*.....383.....%..183..876......179..$..................254.........................$..........697.*..............935...*...............\n...50.." <> ...}
```

## Solvers

```elixir
defmodule PartOne do
  @numbers ~r/[0-9]+/
  @symbols ~r/[%&#=@\?\*\+\$\-\/]/

  @doc ~S"""
      iex> PartOne.parse("617*......")
      [617]

      iex> PartOne.parse("617.......\n..$.......")
      [617]
  """
  def parse(input) do
    input = String.split(input, "\n", trim: true)

    symbols = extract_symbol_coords(input)

    for {line, y} <- Enum.with_index(input),
        matches <- Regex.scan(@numbers, line, capture: :first, return: :index),
        {x, width} <- matches,
        reduce: [] do
      acc ->
        if symbol_adjacent?(x, x + width - 1, y, symbols) do
          s = String.slice(line, x, width)
          n = String.to_integer(s)
          [n | acc]
        else
          acc
        end
    end
  end

  def process(input) do
    Enum.sum(input)
  end

  def solve(input) do
    input
    |> parse()
    |> process()
  end

  @doc ~S"""
      iex> PartOne.extract_symbol_coords(["*..",".$.",".?.","..+"])
      MapSet.new([{0, 0}, {1, 1}, {1, 2}, {2, 3}])
  """
  def extract_symbol_coords(inputs) do
    for {line, y} <- Enum.with_index(inputs),
        matches <- Regex.scan(@symbols, line, capture: :first, return: :index),
        {x, 1} <- matches,
        reduce: MapSet.new() do
      acc ->
        MapSet.put(acc, {x, y})
    end
  end

  # determine a bounding box
  def surrounding_coords(x1, x2, y) do
    for x <- (x1 - 1)..(x2 + 1), y <- (y - 1)..(y + 1), x >= 0, y >= 0 do
      {x, y}
    end
  end

  def symbol_adjacent?(x1, x2, y, symbols) do
    Enum.any?(surrounding_coords(x1, x2, y), &MapSet.member?(symbols, &1))
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, PartOne, <<70, 79, 82, 49, 0, 0, 21, ...>>, {:symbol_adjacent?, 4}}
```

```elixir
defmodule PartTwo do
  import PartOne, only: [parse: 1]

  def process(_input) do
    ""
  end

  def solve(input) do
    input
    |> parse()
    |> process()
  end
end
```

<!-- livebook:{"output":true} -->

```
{:module, PartTwo, <<70, 79, 82, 49, 0, 0, 6, ...>>, {:solve, 1}}
```

## Solutions

```elixir
PartOne.solve(input)
```

<!-- livebook:{"output":true} -->

```
509115
```

```elixir
PartTwo.solve(input)
```

<!-- livebook:{"output":true} -->

```
""
```

<!-- livebook:{"branch_parent_index":1} -->

## Tests

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
ExUnit.start(auto_run: false, seed: 12345, timeout: 5000)

defmodule PartOneTest do
  use ExUnit.Case, async: true

  doctest PartOne

  describe "Part One" do
    @test_input """
    467..114..
    ...*......
    ..35..633.
    ......#...
    617*......
    .....+.58.
    ..592.....
    ......755.
    ...$.*....
    .664.598..
    """
    test "sums part numbers" do
      assert PartOne.solve(@test_input) == 4361
    end
  end
end

defmodule PartTwoTest do
  use ExUnit.Case, async: true

  @moduletag :skip

  doctest PartOne

  describe "Part Two" do
    @test_input """
    """
    test "TODO" do
      assert PartTwo.solve(@test_input) == false
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
***.*...
Finished in 0.00 seconds (0.00s async, 0.00s sync)
6 doctests, 2 tests, 0 failures, 4 skipped

Randomized with seed 12345
```

<!-- livebook:{"output":true} -->

```
%{total: 8, skipped: 4, failures: 0, excluded: 0}
```

<!-- livebook:{"branch_parent_index":0} -->

## Golfing

## Benchmarks

```elixir
Benchee.run(
  %{
    "PartOne" => &PartOne.solve/1
    # "PartTwo" => &PartTwo.solve/1
  },
  inputs: %{
    input: input,
    test_input: """
    467..114..
    ...*......
    ..35..633.
    ......#...
    617*......
    .....+.58.
    ..592.....
    ......755.
    ...$.*....
    .664.598..
    """
  },
  warmup: 2,
  time: 3,
  memory_time: 3,
  reduction_time: 3
)
```

<!-- livebook:{"output":true} -->

```
Operating System: Linux
CPU Information: AMD Ryzen 9 5950X 16-Core Processor
Number of Available Cores: 32
Available memory: 62.71 GB
Elixir 1.15.7
Erlang 26.1.2

Benchmark suite executing with the following configuration:
warmup: 2 s
time: 3 s
memory time: 3 s
reduction time: 3 s
parallel: 1
inputs: input, test_input
Estimated total run time: 22 s

Benchmarking PartOne with input input ...
Benchmarking PartOne with input test_input ...

##### With input input #####
Name              ips        average  deviation         median         99th %
PartOne        225.64        4.43 ms     Â±4.36%        4.40 ms        5.04 ms

Memory usage statistics:

Name       Memory usage
PartOne         9.72 MB

**All measurements for memory usage were the same**

Reduction count statistics:

Name    Reduction count
PartOne        440.87 K

**All measurements for reduction count were the same**

##### With input test_input #####
Name              ips        average  deviation         median         99th %
PartOne       26.05 K       38.39 Î¼s    Â±11.66%       37.16 Î¼s       51.51 Î¼s

Memory usage statistics:

Name       Memory usage
PartOne        30.52 KB

**All measurements for memory usage were the same**

Reduction count statistics:

Name    Reduction count
PartOne          2.74 K

**All measurements for reduction count were the same**
```

<!-- livebook:{"output":true} -->

```
%Benchee.Suite{
  system: %{
    erlang: "26.1.2",
    os: :Linux,
    elixir: "1.15.7",
    available_memory: "62.71 GB",
    cpu_speed: "AMD Ryzen 9 5950X 16-Core Processor",
    num_cores: 32
  },
  configuration: %Benchee.Configuration{
    parallel: 1,
    time: 3000000000.0,
    warmup: 2000000000.0,
    memory_time: 3000000000.0,
    reduction_time: 3000000000.0,
    pre_check: false,
    formatters: [Benchee.Formatters.Console],
    percentiles: ~c"2c",
    print: %{configuration: true, benchmarking: true, fast_warning: true},
    inputs: [
      {"input",
       ".....664...998........343...............851............................2............414.....................3....................948.164....\n......*..................*617....885...*....................-......250.........536..........470...#..................../4......=.....*......\n...407...570..218................-.....654........776.....920.........*753...........566......*..347.....61.-979..786........935...42.......\n.......%....*...$..311.102..........................*.907.....723...............622-....*..354..............................................\n.....266..............*....987.554...........&....288...#......#.......................69......41..........486..-...........................\n.849................................&........781...........978......724*..196..../767................725..../...892.....*355.....815.390....\n....*......@.....*988......%........704...............*......&...........*...................826.....................243.......#....*.......\n...796......729.9.........490..721....................438.=....272..54&...926..481..............*..523......&.785...........766.......*493..\n........281.........706...........=.666.......505.........579.*................./...669.........73...*...639...*.......479.........514......\n...........*...386.......375..................................525.926..$120............&.580.........457........325.......*829..............\n.....758..662.......937....%...661.24......749*323...444.............*.............583....*.........................................223.....\n.......*........665....*...........*................@.................154......965..*....119.......620*............347.................*470.\n........391.........183.........75..783../....................209.312............*...362........./.....667..........*....77.................\n...379=..........................$......261..228........907......*.......+591...178.........227.704........@771..667..........268......543..\n.......................#.....................*..........*....................................-........*581...........101........*.....*.....\n................471...545..135........432..178....$225..143...973#..322............2.................................*...........239...985..\n......728*612...*.........*.....65....................................*...........*................&..............527....255+../............\n..255.........435.304....854...................-............=........261......&...749....+......196....694......................779..271.374\n......604.........*.....................708.....922.......76..82*554......991..19........456............*..582.........597@.................\n.................374..*........*707........................................*....................609...52....%.................483...........\n..../..................739......................$..........649...973.*511.861..20%.................=.....................148....*......343..\n...978.................................282&...401......961....-.*.........................................499%.........../.....347..........\n.................+..174..315.-819.................841.....*66......820.836......8....60....456........*........434..........................\n....62%.......908......./.................770....../..................*.....852......&.....*........317...%......@.......+.......691........\n........793......../......411......963.......*594..................@........@......*.......45.............729...........306.148....*..@.....\n626.......$......35..........*........*...........................77.134........584.....23....35................589........./...482..853....\n.......................366..668.........................238...........*..265.........*..........*...........&......*...471..................\n..741.............679.................@.807...76....185*...........211..%.........507....178..583....*.561...521..620...*....865.$247.494...\n.....*.....383.....%..183..876......179..$..................254.........................$..........697.*..............935...*...............\n...50.." <> ...},
      {"test_input",
       "467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\n"}
    ],
    save: false,
    load: false,
    unit_scaling: :best,
    assigns: %{},
    before_each: nil,
    after_each: nil,
    before_scenario: nil,
    after_scenario: nil,
    measure_function_call_overhead: false,
    title: nil,
    profile_after: false
  },
  scenarios: [
    %Benchee.Scenario{
      name: "PartOne",
      job_name: "PartOne",
      function: &PartOne.solve/1,
      input_name: "input",
      input: ".....664...998........343...............851............................2............414.....................3....................948.164....\n......*..................*617....885...*....................-......250.........536..........470...#..................../4......=.....*......\n...407...570..218................-.....654........776.....920.........*753...........566......*..347.....61.-979..786........935...42.......\n.......%....*...$..311.102..........................*.907.....723...............622-....*..354..............................................\n.....266..............*....987.554...........&....288...#......#.......................69......41..........486..-...........................\n.849................................&........781...........978......724*..196..../767................725..../...892.....*355.....815.390....\n....*......@.....*988......%........704...............*......&...........*...................826.....................243.......#....*.......\n...796......729.9.........490..721....................438.=....272..54&...926..481..............*..523......&.785...........766.......*493..\n........281.........706...........=.666.......505.........579.*................./...669.........73...*...639...*.......479.........514......\n...........*...386.......375..................................525.926..$120............&.580.........457........325.......*829..............\n.....758..662.......937....%...661.24......749*323...444.............*.............583....*.........................................223.....\n.......*........665....*...........*................@.................154......965..*....119.......620*............347.................*470.\n........391.........183.........75..783../....................209.312............*...362........./.....667..........*....77.................\n...379=..........................$......261..228........907......*.......+591...178.........227.704........@771..667..........268......543..\n.......................#.....................*..........*....................................-........*581...........101........*.....*.....\n................471...545..135........432..178....$225..143...973#..322............2.................................*...........239...985..\n......728*612...*.........*.....65....................................*...........*................&..............527....255+../............\n..255.........435.304....854...................-............=........261......&...749....+......196....694......................779..271.374\n......604.........*.....................708.....922.......76..82*554......991..19........456............*..582.........597@.................\n.................374..*........*707........................................*....................609...52....%.................483...........\n..../..................739......................$..........649...973.*511.861..20%.................=.....................148....*......343..\n...978.................................282&...401......961....-.*.........................................499%.........../.....347..........\n.................+..174..315.-819.................841.....*66......820.836......8....60....456........*........434..........................\n....62%.......908......./.................770....../..................*.....852......&.....*........317...%......@.......+.......691........\n........793......../......411......963.......*594..................@........@......*.......45.............729...........306.148....*..@.....\n626.......$......35..........*........*...........................77.134........584.....23....35................589........./...482..853....\n.......................366..668.........................238...........*..265.........*..........*...........&......*...471..................\n..741.............679.................@.807...76....185*...........211..%.........507....178..583....*.561...521..620...*....865.$247.494...\n.....*.....383.....%..183..876......179..$..................254.........................$..........697.*..............935...*...............\n...50.." <> ...,
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 4431871.717872969,
          ips: 225.63829994608682,
          std_dev: 193442.89728283935,
          std_dev_ratio: 0.043648126479545364,
          std_dev_ips: 9.848689054676392,
          median: 4398598.0,
          percentiles: %{50 => 4398598.0, 99 => 5038382.2200000025},
          mode: 4359087,
          minimum: 4341358,
          maximum: 7978279,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 677
        },
        samples: [4510949, 4395538, 4357447, 4352507, 4385378, 4558399, 4450088, 4415758, 4358358,
         4349567, 4343458, 4643490, 4462708, 4471969, 4425568, 4366847, 4352508, 4551809, 4461219,
         4413028, 4362367, 4352518, 4352397, 4551079, 4469009, 4412968, 4371907, 4359378, 4350287,
         4580450, 4461958, 4422248, 4380028, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 10193000.0,
          ips: nil,
          std_dev: 0.0,
          std_dev_ratio: 0.0,
          std_dev_ips: nil,
          median: 10193000.0,
          percentiles: %{50 => 10193000.0, 99 => 10193000.0},
          mode: 10193000,
          minimum: 10193000,
          maximum: 10193000,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 536
        },
        samples: [10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000,
         10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000,
         10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000, 10193000,
         10193000, 10193000, 10193000, 10193000, 10193000, 10193000, ...]
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 440867.0,
          ips: nil,
          std_dev: 0.0,
          std_dev_ratio: 0.0,
          std_dev_ips: nil,
          median: 440867.0,
          percentiles: %{50 => 440867.0, 99 => 440867.0},
          mode: 440867,
          minimum: 440867,
          maximum: 440867,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 658
        },
        samples: [440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867,
         440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867,
         440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, 440867, ...]
      }
    },
    %Benchee.Scenario{
      name: "PartOne",
      job_name: "PartOne",
      function: &PartOne.solve/1,
      input_name: "test_input",
      input: "467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\n",
      before_each: nil,
      after_each: nil,
      before_scenario: nil,
      after_scenario: nil,
      tag: nil,
      run_time_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 38390.53429547065,
          ips: 26048.08759116387,
          std_dev: 4477.574433324679,
          std_dev_ratio: 0.11663225103519717,
          std_dev_ips: 3038.0470909194287,
          median: 37160.0,
          percentiles: %{50 => 37160.0, 99 => 51511.0},
          mode: 37040,
          minimum: 36560,
          maximum: 765067,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 77605
        },
        samples: [61870, 48851, 40720, 45161, 43630, 41470, 47551, 42350, 42690, 42141, 41080,
         41411, 41490, 41040, 40641, 41150, 41000, 46521, 40950, 47700, 40701, 41370, 40941, 40680,
         40960, 40931, 40550, 40000, 40461, 43650, 40770, 41581, ...]
      },
      memory_usage_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 31256.0,
          ips: nil,
          std_dev: 0.0,
          std_dev_ratio: 0.0,
          std_dev_ips: nil,
          median: 31256.0,
          percentiles: %{50 => 31256.0, 99 => 31256.0},
          mode: 31256,
          minimum: 31256,
          maximum: 31256,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 34446
        },
        samples: [31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256,
         31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256, 31256,
         31256, 31256, 31256, 31256, 31256, 31256, 31256, ...]
      },
      reductions_data: %Benchee.CollectionData{
        statistics: %Benchee.Statistics{
          average: 2738.0,
          ips: nil,
          std_dev: 0.0,
          std_dev_ratio: 0.0,
          std_dev_ips: nil,
          median: 2738.0,
          percentiles: %{50 => 2738.0, 99 => 2738.0},
          mode: 2738,
          minimum: 2738,
          maximum: 2738,
          relative_more: nil,
          relative_less: nil,
          absolute_difference: nil,
          sample_size: 28051
        },
        samples: [2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738,
         2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738, 2738,
         2738, 2738, ...]
      }
    }
  ]
}
```

<!-- livebook:{"branch_parent_index":1} -->

## Failures

Sometimes my ideas don't work out.

<!-- livebook:{"offset":25566,"stamp":{"token":"XCP.1s_Y_NeAs8zZKupeOXK0F81ZHVpr0vahQr3wmhyx4b3QlgeMO_Q1Nl3f20qcMeiQ63g12yUNqB_elT41qWjgQ9EBsy5xWmS_KIkTJ46sLfK9caeNy5c","version":2}} -->
